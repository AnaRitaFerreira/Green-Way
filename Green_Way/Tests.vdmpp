class Tests is subclass of MyTestCase

operations

	public Run : () ==> ()
  Run()  ==
  (
  -- Valid test cases  
		Test1(); -- Adicionar e remover Service Providers
		Test2(); -- Adicionar e remover Clientes
		Test3(); -- Retorna o custo de passar em postos da Highway
		Test4(); -- Retorna o custo de passar em postos únicos (OnePassage)
		Test5(); -- Envia e efetua pagamento do invoice do mês
		Test6(); -- Envia e efetua pagamento do invoice do mês anterior com mudança do ano
		
  -- Error test cases (remover o comentário 1 a 1 para testar que falham)   
	  /*
	   Test7(); -- Remocao de Service Providers não existentes
		 Test8(); -- Remocao de Clientes não existentes
		 Test9(); -- Entrar num posto de uma Highway e numa saída de outra Highway
	   Test10(); -- Passa num posto que não existente
     Test11(); -- Paga fatura que ainda não foi emitida
    */
  );
  

  /* VALID TEST CASES */
  -- Adicionar e remover Service Providers
 	public Test1 : () ==> ()
  Test1() ==
  (
  	dcl gw : Green_Way;
  	dcl spa: Service_Provider;
  	dcl spb: Service_Provider;
  	
  	gw := new Green_Way();
  	
  	spa := new Service_Provider("SPA");
  	spb := new Service_Provider("SPB");
  	
  	gw.addServiceProvider(spa);
  	gw.addServiceProvider(spb);
  	gw.removeServiceProvider(spb);
  	assertEqual(gw.sproviders, {spa});
  	
  );
  
  -- Adicionar e remover Clientes
 	public Test2 : () ==> ()
  Test2() ==
  (
  	dcl gw : Green_Way;
  	dcl cli1: Client;
  	dcl cli2: Client;
  	dcl cli3: Client;
  	
  	gw := new Green_Way();
  	
  	cli1 := new Client("CL1", 281923918);
  	cli2 := new Client("CL2", 1236334198);
  	cli3 := new Client("CL3", 1236334198);
  	
  	gw.addClient(cli1);
  	gw.addClient(cli3);	
  	gw.removeClient(cli1);
  	gw.addClient(cli1);
  	gw.addClient(cli2);
  	gw.removeClient(cli3);
  	
  	assertEqual(gw.clients, {cli1,cli2});

  );
  
  -- Retorna o custo de passar em postos da Highway
  public Test3 : () ==> ()
  Test3() ==
  (
  	dcl gw : Green_Way;
  	dcl cli1: Client;
  	dcl spa: Service_Provider;
  	dcl entrance: Highway;
  	dcl out: Highway;
  	dcl spot: Spot;
   	dcl device: OnePassage;
  	
  	gw := new Green_Way();
  	entrance := new Highway(5,5, <ENTRANCE>);
   	out := new Highway(6,6, <EXIT>);
   	spot := new Spot(5,5);
   	
  	gw.highway_prices := 
		{ 
			mk_Green_Way`OriginDestiny(entrance, out) |-> 4.2
		};
  	
  	cli1 := new Client("CLI1", 281923918);
  	gw.addClient(cli1);
  	spa := new Service_Provider("SPA");
   	device := new OnePassage(spot, 2.3);
  	spa.addService(device); 	
  	
  	gw.addServiceProvider(spa);
  	gw.passa(cli1, entrance, new Time());
  	gw.passa(cli1, spot, new Time());
  	gw.passa(cli1, out, new Time());
  	
  	assertEqual(0, gw.passages(cli1)(1).cost);
  	assertEqual(2.3, gw.passages(cli1)(2).cost);
  	assertEqual(4.2, gw.passages(cli1)(3).cost);
  	
  );
  
  -- Retorna o custo de passar em postos únicos (OnePassage)
 	public Test4 : () ==> ()
  Test4() ==
  (
  	dcl gw : Green_Way;
  	dcl cli1: Client;
  	dcl spa: Service_Provider;
  	dcl spot: Spot;
  	dcl device: OnePassage;
  	
  	gw := new Green_Way();
  	spot := new Spot(5,5);
  	
  	cli1 := new Client("Cli1", 123456789);
  	gw.addClient(cli1);
  	spa := new Service_Provider("SPA");
  	device := new OnePassage(spot, 2.3);
  	spa.addService(device);
  	gw.addServiceProvider(spa);
  	
  	gw.passa(cli1, spot, new Time());
  	
  	assertEqual(2.3, gw.passages(cli1)(1).cost);
  	
  );
  
  -- Envia e efetua pagamento do invoice do mês
 	public Test5 : () ==> ()
  Test5() ==
  (
  	dcl gw : Green_Way;
  	dcl cli1: Client;
  	dcl spa: Service_Provider;
  	dcl spot: Spot;
  	dcl device: OnePassage;
  	
  	gw := new Green_Way();
  	spot := new Spot(5,5);
  	
  	cli1 := new Client("CLI1", 281923918);
  	gw.addClient(cli1);
  	spa := new Service_Provider("SPA");
  	device := new OnePassage(spot, 2.3);
  	spa.addService(device);
  	gw.addServiceProvider(spa);
  	
  	gw.passa(cli1, spot, new Time());
  	
  	gw.incrementMonth();
  	
  	assertEqual(2.3, gw.invoices(cli1)(1).price);
   	assertEqual(false, gw.invoices(cli1)(1).paid);
   	
  	gw.payInvoice(cli1, 1, 2015);
  	
  	assertTrue(gw.invoices(cli1)(1).paid);
  );
  
  -- Envia e efetua pagamento do invoice do mês anterior com mudança do ano
  public Test6 : () ==> ()
  Test6() == 
  (
  	dcl gw : Green_Way;
  	dcl cli1: Client;
  	dcl spa: Service_Provider;
  	dcl spot: Spot;
  	dcl device: OnePassage;
  	
  	gw := new Green_Way();
  	spot := new Spot(5,5);
  	
  	cli1 := new Client("CLI1", 281923918);
  	gw.addClient(cli1);
  	spa := new Service_Provider("SPA");
  	device := new OnePassage(spot, 2.3);
  	spa.addService(device);
  	gw.addServiceProvider(spa);
  	
  	gw.passa(cli1, spot, new Time());
  	
  	gw.incrementMonth();gw.incrementMonth();gw.incrementMonth();
  	gw.incrementMonth();gw.incrementMonth();gw.incrementMonth();
  	gw.incrementMonth();gw.incrementMonth();gw.incrementMonth();
  	gw.incrementMonth();gw.incrementMonth();gw.incrementMonth();
  
  	assertEqual(2.3, gw.invoices(cli1)(1).price);
  	
  );
  
   /* ERROR TEST CASES */
  
  -- Remocao de Service Providers não existentes
 	public Test7 : () ==> ()
  Test7() ==
  (
  	dcl gw : Green_Way;
  	dcl spa: Service_Provider;
  	dcl spb: Service_Provider;
  	
  	gw := new Green_Way();
  	
  	spa := new Service_Provider("SPA");
  	spb := new Service_Provider("SPB");
  	
  	gw.addServiceProvider(spa);
  	--gw.addServiceProvider(spa); -- tentativa de adição repetida
  	 
  	gw.removeServiceProvider(spa);
  	gw.removeServiceProvider(spb); --tentativa de remoção de um serviceProvider inexistente
  );
  
  -- Remocao de Clientes não existentes
 	public  Test8 : () ==> ()
  Test8() ==
  (
  	dcl gw : Green_Way;
  	dcl cli1: Client;
  	dcl cli2: Client;
  	
  	gw := new Green_Way();
  	
  	cli1 := new Client("CLI1", 281923918);
  	cli2 := new Client("CLI2", 1236334198);
  	
  	gw.addClient(cli1);
  	-- gw.addClient(cli1); --adicionar cliente repetido
  	
  	gw.removeClient(cli1);
  	gw.removeClient(cli2); --eliminar cliente inexistente

  );
  -- Entrar num posto de uma Highway e numa saída de outra Highway
  public Test9 : () ==> ()
  Test9() ==
  (
  	dcl gw : Green_Way;
  	dcl cli1: Client;
  	dcl e1: Highway;
  	dcl o1: Highway;
  	dcl e2: Highway;
  	dcl o2: Highway;
  	
  	gw := new Green_Way();
  	e1 := new Highway(5,5, <ENTRANCE>);
   	o1 := new Highway(6,6, <EXIT>);
   	e2 := new Highway(4,4, <ENTRANCE>);
   	o2 := new Highway(6,8, <EXIT>);
   	
  	gw.highway_prices := 
		{ 
			mk_Green_Way`OriginDestiny(e1, o1) |-> 4.2,
			mk_Green_Way`OriginDestiny(e2, o2) |-> 8
			
		};
  	
  	cli1 := new Client("CLI1", 281923918);
  	gw.addClient(cli1);
  	
  	gw.passa(cli1, e1, new Time());
  	gw.passa(cli1, o2, new Time());

  );
  
  -- Passa num posto que não existente
  public Test10 : () ==> ()
  Test10() ==
  (
  	dcl gw : Green_Way;
  	dcl cli1: Client;
  	dcl spa: Service_Provider;
  	dcl spot: Spot;
  	dcl s: Spot;
  	dcl device: OnePassage;
  	
  	gw := new Green_Way();
  	spot:= new Spot(5,5);
  	s:= new Spot(6,6);
  	
  	cli1 := new Client("Cli1", 123456789);
  	gw.addClient(cli1);
  	spa := new Service_Provider("SPA");
  	device := new OnePassage(spot, 2.3);
  	spa.addService(device);
  	gw.addServiceProvider(spa);
	
		gw.passa(cli1, spot, new Time());
   	gw.passa(cli1, s, new Time());
  	
  );
  
  -- Paga fatura que ainda não foi emitida
  public Test11 : () ==> ()
  Test11() ==
  (
  	dcl gw : Green_Way;
  	dcl cli1: Client;
  	
  	gw := new Green_Way();
  	cli1 := new Client("CLI1", 123456789);
  	gw.addClient(cli1);
  	
   	gw.incrementMonth();
   	   	
   	gw.payInvoice(cli1, 5, 2015);  	
  );

end Tests